
#BEGIN_PROLONG
bnbcosmics: {
    module_type: "BNBCosmics"
    # Cropper interactions: extract interactions into separate images
    CropInteractions: false
    # store image from each plane by enabling boolean (length = # planes, collection plane = 2)
    EnablePlane: [true,true,true] 
    # image source
    ImageSource: "Wire"
    # use RawDigit, Wire, and Hit as input respectively. Only RawDigit, Wire impelmented for now
    Producers:   { RawDigit:"daq"
                   Wire:"caldata"
                   Hit:"hits" }
    # Verbosity level, 1 = INFO and quite verbose. 0 will potentially kill your terminal. 2 is normal
    Verbosity:   0

    # A hard-cut limit for outer edge of an image. A range is specified by [min,max] pair for each plane and time.
    # The last element is for the time and other elements respect plane ID. Length should be # planes + 1 for 
    # used geometry.
    HardLimitRange: [[-1,-1],[-1,-1],[-1,-1],[400,5007]]
    # Cropping configurations
    EventCropperConfig: { 
        TimePadding:10      # Padding for time
        WirePadding:10      # Padding for wire
        TimeTargetSize:768  # Target image width size (wire)
        WireTargetSize:768  # Target image height size (time)
        CompressionFactor:0 # Compression factor (see note below)
        }
    # Cropping configuration
    InteractionCropperConfig: { 
        TimePadding:10      # Padding for time
        WirePadding:10      # Padding for wire
        TimeTargetSize:192  # Target image width size (wire)
        WireTargetSize:192  # Target image height size (time)
        CompressionFactor:0 # Compression factor (see note below)
        }
    # Note: the cropper first finds the ROI in wire plane by using either SimChannel or MCTrack(+MCShower in future)
    #       then it tries to fit into the output image w.r.t. the center of ROI. If compression factor is 0 or 1, then
    #       it just crops the output iamge size as is. If > 1, then output image sample is originally its target
    #       size (height & width) times the compresion factor, then it compresses this image down to fit the specified
    #       target size.
    # Note for FUTURE: with compression factor 0, plan to support what Kazu used to do: variable image size by extending
    #                  in the unit of target height/width. Downside is that a compression factor is going to be variable
    #                  from one image to antoher.
    ImageFilters:[]
    FilterConfigs: {}
    # Other Knobs
    SkipNeutrons: false
}
#END_PROLONG
