#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "trackfindermodules_microboone.fcl"
#include "mcreco.fcl"
#include "litemc_mcinfo.fcl"
#include "litemc_simch.fcl"
#include "litemc_wire.fcl"
#include "litemc_opdigit.fcl"
#include "litemc_opreco.fcl"
#include "litemc_reco2d.fcl"
#include "cluster_microboone.fcl"
#include "correct_saturation.fcl"
#include "yolo.fcl"
process_name: YoloTrain

services:
{
  scheduler:    { defaultExceptions: false  }
  TFileService: { fileName: "sim_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_simulation_services
}

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  firstRun:    1
  firstEvent:  1
  maxEvents:  -1
}

physics:
{

 producers:
 {
   generator:      @local::microboone_singlep
   largeant:       @local::microboone_largeant
   mcreco:         @local::standard_mcreco
   optdigitizer:   @local::microboone_optical_adc_sim_singlep
   optfem:         @local::microboone_optical_fem_sim_singlep
   triggersim:     @local::ubtrigger_singlep
   pmtreadout:     @local::microboone_optical_dram_readout_sim
   daq:            @local::microboone_simwire
   digitfilter:    @local::microboone_rawdigitfilter
   caldata:        @local::microboone_calroi

   ### OpHit finders
   ophitT:   @local::ub_ophitfinder_t
   ophitFW:  @local::ub_ophitfinder_fw
   ophitSW:  @local::ub_ophitfinder_sw
   ophitCFD: @local::ub_ophitfinder_cfd

   ophitSatT:   @local::ub_ophitfinder_satt
   ophitSatFW:  @local::ub_ophitfinder_satfw
   ophitSatSW:  @local::ub_ophitfinder_satsw
   ophitSatCFD: @local::ub_ophitfinder_satcfd

   ### Saturation correction module
   saturation: @local::correct_saturation

   ### flash finders
   opflash:          @local::microboone_opflash_beam_highgain
   opflashLow:       @local::microboone_opflash_beam_lowgain
   opflashCosmic:    @local::microboone_opflash_cosmic_highgain
   opflashCosmicLow: @local::microboone_opflash_cosmic_lowgain

   sflashT:   @local::ub_sflash_t
   sflashFW:  @local::ub_sflash_fw
   sflashSW:  @local::ub_sflash_sw
   sflashCFD: @local::ub_sflash_cfd

   opflashSat:   @local::microboone_opflash_saturation

   sflashSatT:   @local::ub_sflash_satt
   sflashSatFW:  @local::ub_sflash_satfw
   sflashSatSW:  @local::ub_sflash_satsw
   sflashSatCFD: @local::ub_sflash_satcfd

   gaushit:             @local::microboone_gaushitfinder
   fuzzycluster:        @local::microboone_fuzzycluster
   fuzzyclustermerger:  @local::microboone_fuzzyclustermerger
   linecluster:         @local::microboone_linecluster
   rns:            { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   mcinfo:  @local::litemc_mcinfo
   simch:   @local::litemc_simch
   opdigit: @local::litemc_opdigit
   opreco:  @local::litemc_opreco
   wire:    @local::litemc_wire
   reco2d:  @local::litemc_reco2d
   yolo:    @local::yolo
 }

 simulate: [ rns, generator, largeant, mcreco, optdigitizer, optfem, triggersim, pmtreadout, 
             ophitT, ophitFW, ophitSW, ophitCFD,
             sflashT, sflashFW, sflashSW, sflashCFD,
             saturation,
             ophitSatT, ophitSatFW, ophitSatSW, ophitSatCFD,
             sflashSatT, sflashSatFW, sflashSatSW, sflashSatCFD,
             opflashSat,
             opflashLow,
             opflashCosmic,
             opflashCosmicLow,
             opflash,
             #daq, digitfilter, caldata,
             daq, caldata,
             gaushit,
             fuzzycluster, linecluster 
             ]

 #ana: [opdigit, opreco, mcinfo, simch, wire, reco2d]
 ana: [opdigit, opreco, mcinfo, wire, reco2d, yolo]
 
 stream1:  [ out1 ]

 trigger_paths: [simulate] 

 end_paths:     [stream1, ana]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "empty.root"
   dataTier:    "simulated"
   compressionLevel: 1
   #outputCommands: ["drop *_*_*_*","keep simb::MCTruths_*_*_*","keep sim::SimChannels_*_*_*","keep recob::Wires_*_*_*"]
   outputCommands: ["drop *_*_*_*"]
 }
}

#physics.producers.caldata.DigitModuleLabel:                         "digitfilter"
physics.producers.caldata.DigitModuleLabel:                         "daq"

physics.producers.gaushit.CalDataModuleLabel:                       "caldata"
physics.producers.gaushit.MinSig:                                   [8.0, 8.0, 8.0]

physics.producers.fuzzycluster.HitsModuleLabel:                     "gaushit"
physics.producers.fuzzycluster.CalDataModuleLabel:                  "caldata"

physics.producers.linecluster.ClusterCrawlerAlg.NHitsAve:           [ 2,  2, 0 ]      # number of hits to find the average charge and width
physics.producers.linecluster.ClusterCrawlerAlg.ChgCut:             [ 6, 6, .8 ]      # max fractional hit charge difference for adding hits
physics.producers.linecluster.ClusterCrawlerAlg.MaxWirSkip:         [ 80, 8, 2 ]      # max number of wires to skip without adding a hit
physics.producers.linecluster.ClusterCrawlerAlg.KinkAngCut:         [ 1.0, 1.0, 0.4 ] # kink angle cut (radians) used to follow and merge
physics.producers.linecluster.ClusterCrawlerAlg.MergeChgCut:        [ 6, 6, 0.8 ]     # max charge ratio for cluster merging
physics.producers.linecluster.ClusterCrawlerAlg.HitMergeChiCut:     2.5               # Merge cluster hit-multiplets if the separation chisq
                                                                                                   # is < cut. Set < 0 for no merging
physics.producers.linecluster.ClusterCrawlerAlg.AllowNoHitWire:     80                # Allow skipping N wires w no hits (if poor purity)
physics.producers.linecluster.ClusterCrawlerAlg.uBCode:             true              # use MicroBooNE-specific code

physics.producers.generator.PDG: [ 11 ]            # eminus
physics.producers.generator.PosDist: 0             # Flat position dist.
physics.producers.generator.X0: [ 128.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ 518.5 ]
physics.producers.generator.T0: [ 800.0 ]
physics.producers.generator.SigmaX: [ 127.0 ]      # x = (0, 256)
physics.producers.generator.SigmaY: [ 115.5 ]      # y = (-116.5, 116.5)
physics.producers.generator.SigmaZ: [ 517.5 ]      # z = (0, 1037)
physics.producers.generator.SigmaT: [ 800.0 ]      # In time
physics.producers.generator.PDist: 0               # Flat momentum dist. (0.1-2.0 GeV)
physics.producers.generator.P0: [ 0.505 ]
physics.producers.generator.SigmaP: [ 0.495 ]
physics.producers.generator.AngleDist: 0           # Flat angle dist.
physics.producers.generator.Theta0XZ: [ 0. ]       # y-azimuth
physics.producers.generator.Theta0YZ: [ 0. ]       # y-latitude
physics.producers.generator.SigmaThetaXZ: [ 180. ] # Quasi-isotropic
physics.producers.generator.SigmaThetaYZ: [ 90. ]

physics.analyzers.yolo.GroupAllInteractions: true
physics.analyzers.yolo.CosmicsMode: false
physics.analyzers.yolo.UseSimChannel: true
physics.analyzers.yolo.UseWire: true
physics.analyzers.yolo.SingleParticleMode: true
physics.analyzers.yolo.SingleParticleName: "eminus"
