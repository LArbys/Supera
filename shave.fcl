#include "geometry_microboone.fcl"
#include "timeservice_microboone.fcl"
#include "pmtconfig_microboone.fcl"
#include "databaseutil_microboone.fcl"
#include "sam_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "flashfilter_microboone.fcl"
#include "subevent_module.fcl"
#include "seedservice_microboone.fcl"
#include "triggerenforcement.fcl"
#include "beamdata_microboone.fcl"


BEGIN_PROLOG

microboone_supera:
{
    module_type: Supera
    DatabaseName: "output_supera.mdb"
    CosmicsMode: true
}


END_PROLOG

process_name: suepra
services:
{
  TFileService: { fileName: "tfile_supera.root" }
  Timing:       {}
  FileCatalogMetadata:    @local::art_file_catalog_data
  user: {
          ExptGeoHelperInterface: @local::microboone_geometry_helper
          Geometry:               @local::microboone_geo
	  UBOpReadoutMap:         @local::microboone_opreadoutmap
          TimeService:            @local::microboone_timeservice
          DatabaseUtil:           @local::microboone_database
	  IFDH:                   {}
         }
}

#microboone_tfile_metadata:
#{
#  JSONFileName:          "SPECalibration.root.json"
#  GenerateTFileMetadata: false
#  dataTier:              "root-tuple"
#  fileFormat:            "root"
#}


# Database settings
services.user.DatabaseUtil.DBHostName:    "ifdb02.fnal.gov"
services.user.DatabaseUtil.DBName:        "hootgibson_prod"
services.user.DatabaseUtil.DBUser:        "uboonedaq_web"
services.user.DatabaseUtil.Port:          5444
services.user.DatabaseUtil.PassFileName:  "uboonedb_passwd"  # name of password file. searched for using env var FW_SEARCH_PATH
services.user.DatabaseUtil.ToughErrorTreatment: true
services.user.DatabaseUtil.ShouldConnect: true
services.user.DatabaseUtil.TableName: "main_run"

services.user.TimeService.TrigModuleName: "daq"

outputs:
{
}

physics:
{

    producers: {}
    filters: {}
    analyzers: {
        supera: @local::microboone_supera
        }

 trigger_paths: []
 analyzeIt: [supera]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ analyzeIt ]

}



